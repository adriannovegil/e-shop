version: '3.9'

services:
  # Infrastructure
  # ============================================================================
  # Config service
  config:
    build: ./infrastructure/config
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      CONFIG_KEYSTORE_PASSWORD: ${CONFIG_KEYSTORE_PASSWORD}
      CONFIG_KEY_PASSWORD: ${CONFIG_KEY_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - 8888:8888
    networks:
      - eshopnet
      - observabilitysandbox

  # Discovery service
  discovery:
    build: ./infrastructure/discovery
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
    depends_on:
      - config
    ports:
      - 8761:8761
    networks:
      - eshopnet
      - observabilitysandbox

  # database for catalog query and command
  mongo:
    image: mongo:4.4.6
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
    restart: always
    ports:
      - 27017:27017
    networks:
      - eshopnet
      - observabilitysandbox

  # Database for catalog query and order processing
  postgres:
    build: ./docker/postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: dbpass
      POSTGRES_USER: dbuser
      PGTZ: Europe/Amsterdam
      CATALOG_DB_USER: catalogdbuser
      CATALOG_DB_PASSWORD: dbpass
      CATALOG_DB_NAME: catalogdb
      ORDER_DB_USER: orderdbuser
      ORDER_DB_PASSWORD: dbpass
      ORDER_DB_NAME: orderdb
      KEYCLOAK_DB_USER: keycloak
      KEYCLOAK_DB_PASSWORD: dbpass
      KEYCLOAK_DB_NAME: keycloakdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dbuser" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    networks:
      - eshopnet
      - observabilitysandbox

  # Redis for basket service
  redis:
    image: redis:6.2.4
    restart: on-failure
    environment:
      REDIS_PASSWORD: pass
    ports:
      - 6379:6379
    networks:
      - eshopnet
      - observabilitysandbox

  # Zookeeper
  zookeeper:
    image: wurstmeister/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - eshopnet
      - observabilitysandbox

  # Kafka
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    links:
      - zookeeper
    ports:
      - 9092:9092
    networks:
      - eshopnet
      - observabilitysandbox

  # Keycloak autentication and authorization service
  authorization-service:
    image: jboss/keycloak:14.0.0
    restart: on-failure
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloakdb
      DB_SCHEMA: public
      DB_USER: keycloak
      DB_PASSWORD: dbpass
      KEYCLOAK_IMPORT: /opt/jboss/keycloak/imports/eshop-realm.json
    depends_on:
      - postgres
    volumes:
      - ./docker/keycloak/eshop-realm.json:/opt/jboss/keycloak/imports/eshop-realm.json
    ports:
      - 8090:8080
      - 8443:8443
    networks:
      - eshopnet
      - observabilitysandbox

  # Minio service
  minio:
    image: minio/minio
    restart: always
    environment:
      MINIO_ACCESS_KEY: mystorage
      MINIO_SECRET_KEY: mystorage
      MINIO_REGION: eu-east
    volumes:
      - ./docker/minio:/data
    command: server /data
    ports:
      - 8086:9000
    networks:
      - eshopnet
      - observabilitysandbox

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 mystorage mystorage;
      /usr/bin/mc rm -r --force myminio/catalog-images;
      /usr/bin/mc mb myminio/catalog-images;
      /usr/bin/mc policy download myminio/catalog-images;
      exit 0;
      "
    networks:
      - eshopnet
      - observabilitysandbox

  # Image proxy
  imgproxy:
    image: darthsim/imgproxy:latest
    restart: always
    # Mount a volume as local image source
    #volumes:
    #- ./images:/opt # link to minio volume to imgproxy's /opt folder for local filesystem.
    environment:
      IMGPROXY_ALLOW_ORIGIN: '*'
      # you can link Minio volume to imgproxy and use as a local filesystem.
      #IMGPROXY_LOCAL_FILESYSTEM_ROOT: /opt
      IMGPROXY_USE_S3: 'true'
      IMGPROXY_S3_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: mystorage
      AWS_SECRET_ACCESS_KEY: mystorage
      AWS_REGION: eu-east
    links:
      - minio
    ports:
      - 8887:8080
    networks:
      - eshopnet
      - observabilitysandbox

  # Portainer Docker management service
  portainer:
    image: portainer/portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/portainer-data:/data
    ports:
      - 9000:9000
    networks:
      - eshopnet
      - observabilitysandbox

  # Services
  # ============================================================================
  # Catalog command service
  # Analytics service
  analytics:
    build: ./services/analytics
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    depends_on:
      - config
      - discovery
      - kafka
    networks:
      - eshopnet
      - observabilitysandbox

  # Basket service
  basket:
    build: ./services/basket
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    depends_on:
      - config
      - discovery
      - kafka
    networks:
      - eshopnet
      - observabilitysandbox

  catalog-command:
    build: ./services/catalog/catalog-command
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      - config
      - discovery
      - kafka
    networks:
      - eshopnet
      - observabilitysandbox

  # Catalog query service
  catalog-query:
    build: ./services/catalog/catalog-query
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      - config
      - discovery
      - kafka
    networks:
      - eshopnet
      - observabilitysandbox

  # Order grace period task
  order-grace-period-task: ####
    build: ./services/order-grace-period-task
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    depends_on:
      - order-processing
    networks:
      - eshopnet
      - observabilitysandbox

  # Order notifications service
  order-notifications:
    build: ./services/order-notifications
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    depends_on:
      - config
      - discovery
      - kafka
    networks:
      - eshopnet
      - observabilitysandbox

  # Order proccessing service
  order-processing:
    build: ./services/order-processing
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    depends_on:
      - config
      - discovery
      - kafka
    networks:
      - eshopnet
      - observabilitysandbox

  # Payment service
  payment:
    build: ./services/payment
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    depends_on:
      - config
      - discovery
      - kafka
    networks:
      - eshopnet
      - observabilitysandbox

  # Image service
  image-service:
    build: ./infrastructure/image-service
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
    depends_on:
      - config
      - discovery
      - minio
    ports:
      - 7070:8080
    networks:
      - eshopnet
      - observabilitysandbox

  # System gateway
  gateway:
    build: ./infrastructure/gateway
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVICE_USER: ${CONFIG_SERVICE_USER}
      CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
      EUREKA_USER: ${EUREKA_USER}
    depends_on:
      - config
      - discovery
      - kafka
    ports:
      - 8080:8080
    networks:
      - eshopnet
      - observabilitysandbox

networks:
  eshopnet:
    name: eshopnet
    external: true
  observabilitysandbox:
    name: observabilitysandbox
    external: true
